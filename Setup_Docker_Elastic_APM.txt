@Tucker Elliott
Steps for setting up the pieces of this project.

https://www.youtube.com/watch?v=ksQ8KEONkmQ&t=722s

-Quick tutorial on setting up an Ubuntu VM.
-The video uses a different version of Ubuntu, but it works the same way.
-We want to use Ubuntu 18.04:
	https://ubuntu.com/download/desktop
-Follow the video, I skipped the setup for fullscreen mode and make sure to set the amount of RAM for the VM is a little more than 4GB (I went with around 5 to be safe) and I made the disk size around 80GB (again just to be safe)
-These preferences can also be changed later.
-When starting the VM make sure to run:
	sudo sysctl -w vm.max_map_count=262155 
-this will take advantage of the memory settings we set when creating the VM and is necessary to run the elastic stack.
----------------------------------------------

Docker:
-run these commands to set up you Docker repository: 
	
1.	sudo apt-get update
	
2.	sudo apt-get install apt-transport-https ca-certificates curl gnupg-agen software-properties-common

3.	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

4.	sudo add-apt-repository "deb [arch=amd64] https:download.docker.com/linux/ubuntu bionic stable"

-now to install docker ce
(step 3 is for verifying the install)

1.	sudo apt-get update

2.	sudo apt-get install docker-ce docker-ce-cli container.io

3.	sudo docker run hello-world

----------------------------------------------

Elastic Stack:
-You can pull each service for elastic individually, but we will set up a docker-compose.yml to pull all necessary images and run them.
-use: sudo gedit docker-compose.yml and configure the file as needed.
-Our compose file looks like:

version: "3"
services:
  apm-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.2
    ports:
    - 9200
  kibana:
    image: docker.elastic.co/kibana/kibana:6.4.2
    environment:
      ELASTICSEARCH_URL: http://apm-elasticsearch:9200
    ports:
    - 5601:5601
    links:
    - apm-elasticsearch
    depends_on:
    - apm-elasticsearch
  elastic-apm-server:
    image: docker.elastic.co/apm/apm-server:6.5.0
    command: [
      "bash",
      "-c",
      "apm-server run -e -E
                          output.elasticsearch.hosts=['http://apm-elasticsearch:9200']
                          "]
    ports:
    - 8200
    links:
    - apm-elasticsearch
    depends_on:
    - apm-elasticsearch
  order-service:
    image: docker.io/devbhuwan/order-service
    build:
      context: order-service
      dockerfile: Dockerfile
      args:
      - JAR_FILE=target/order-service-1.0-SNAPSHOT.jar
    ports:
    - 8080:8080
    environment:
      ELASTIC_APM_SERVICE_NAME: order-service
      ELASTIC_APM_APPLICATION_PACKAGES: io.github.bhuwanupadhyay
      ELASTIC_APM_SERVER_URLS: http://elastic-apm-server:8200
    links:
    - elastic-apm-server
    depends_on:
    - elastic-apm-server


- .yml files are very particular about spacing and will break if you use tabs. Make sure you only use spaces and correct indentation.
-Now you can run:
	sudo docker-compose up
-Wait for the setup. This will take a little while, but the text on screen will stall and you will know everything has been created.
-You can use: sudo docker-compose ps :to check what containers are running from another terminal window.
-In a browser (I used firefox) open localhost:5601 to open the kibana page. If the containers aren't fully created or running you will get an error message. If so, refresh after another minute or so.

-As long as your docker-compose file is correct you will have all of your services running in containers and communicating with each other.

----------------------------------------------

Now that we have kibana and elasticsearch running as containers and the APM server started we can work on creating a jar file in which we can implement the java APM agent.

We should focus on using Maven to create said jar file, and Spring Boot as our means of creating the java application.

-we are starting with a demo project from a github repo as this is our first time using the spring boot framework and maven so we wanted to have a foundation that gives us some baseline references going forward.

-we do need to add another plugin to the pom.xml of our specific project to succeed on the build:
	<plugin>
		<groupId>org.apache.maven.plugins</groupId>
		<artifactId>maven-surefire-plugin</artifactId>
		<version>2.19.1</version>
	</plugin>

-------------------------------------------------------------------------

APM agent:
-first we have to download the apm agent jar from Maven Central:
https://mvnrepository.com/artifact/co.elastic.apm/elastic-apm-agent/1.12.0

-You may need to add the config for the apm agent to an elasticapm.properties file which can be added to the resources folder in your java project, usually found at: src/main/resources

-we need to COPY the agent into the application's container using the Dockerfile:
	COPY ./elastic-apm-agent-1.12.0.jar /path/to/elastic-apm-agent-1.12.0.jar

-finally we can add the javaagent flag to our project's Dockerfile in the ENTRYPOINT:
	-javaagent:/path/to/elastic-apm-agent-<version>.jar



